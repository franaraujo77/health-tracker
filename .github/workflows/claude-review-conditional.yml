name: Claude Code Review (Conditional)

# This workflow triggers after the validation orchestrator completes
# and conditionally runs Claude Code review only when all validations pass

on:
  workflow_run:
    workflows: ["Validation Orchestrator"]
    types:
      - completed

permissions:
  contents: read
  pull-requests: write
  issues: read
  id-token: write
  checks: write
  statuses: write

# Group by PR number to cancel old runs
concurrency:
  group: claude-review-${{ github.event.workflow_run.pull_requests[0].number }}
  cancel-in-progress: true

# Workflow-level timeout (30 minutes)
timeout-minutes: 30

jobs:
  # Job 1: Evaluate whether Claude review should run
  evaluate:
    name: Evaluate Validation Status
    runs-on: ubuntu-latest
    # Only run if the validation orchestrator workflow was triggered by a pull request
    if: github.event.workflow_run.event == 'pull_request'

    outputs:
      should_review: ${{ steps.decision.outputs.should_review }}
      pr_number: ${{ steps.pr.outputs.pr_number }}
      validation_summary: ${{ steps.decision.outputs.validation_summary }}
      all_passed: ${{ steps.decision.outputs.all_passed }}
      has_critical_failures: ${{ steps.decision.outputs.has_critical_failures }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get PR number
        id: pr
        run: |
          PR_NUMBER=${{ github.event.workflow_run.pull_requests[0].number }}
          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "PR Number: ${PR_NUMBER}"

      - name: Download validation artifacts
        id: download
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: validation-report-${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Parse validation results and make decision
        id: decision
        run: |
          # Check if artifact was downloaded successfully
          if [ ! -f "error-report.json" ]; then
            echo "::warning::Validation report not found, defaulting to skip review"
            echo "should_review=false" >> $GITHUB_OUTPUT
            echo "all_passed=unknown" >> $GITHUB_OUTPUT
            echo "has_critical_failures=unknown" >> $GITHUB_OUTPUT
            echo "validation_summary=Validation report not available" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Parse the JSON report
          ALL_PASSED=$(jq -r '.all_passed' error-report.json)
          HAS_CRITICAL_FAILURES=$(jq -r '.has_critical_failures' error-report.json)
          ERROR_COUNT=$(jq '.errors | length' error-report.json)

          echo "all_passed=${ALL_PASSED}" >> $GITHUB_OUTPUT
          echo "has_critical_failures=${HAS_CRITICAL_FAILURES}" >> $GITHUB_OUTPUT

          # Log decision reasoning
          echo "## Decision Logic" >> $GITHUB_STEP_SUMMARY
          echo "- All Passed: ${ALL_PASSED}" >> $GITHUB_STEP_SUMMARY
          echo "- Has Critical Failures: ${HAS_CRITICAL_FAILURES}" >> $GITHUB_OUTPUT
          echo "- Error Count: ${ERROR_COUNT}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Decision: Trigger Claude review ONLY when all validations pass
          # This ensures we only spend Claude API credits on clean, working code
          if [ "${ALL_PASSED}" = "true" ]; then
            echo "should_review=true" >> $GITHUB_OUTPUT
            echo "validation_summary=‚úÖ All validations passed - proceeding with Claude Code review" >> $GITHUB_OUTPUT
            echo "**Decision:** ‚úÖ Trigger Claude Code Review" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** All validations passed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "should_review=false" >> $GITHUB_OUTPUT
            if [ "${HAS_CRITICAL_FAILURES}" = "true" ]; then
              echo "validation_summary=‚ùå Critical validation failures detected - skipping Claude review" >> $GITHUB_OUTPUT
              echo "**Decision:** ‚ùå Skip Claude Code Review" >> $GITHUB_STEP_SUMMARY
              echo "**Reason:** Critical validation failures must be fixed first" >> $GITHUB_STEP_SUMMARY
            else
              echo "validation_summary=‚ö†Ô∏è Non-critical validation issues detected - skipping Claude review" >> $GITHUB_OUTPUT
              echo "**Decision:** ‚ö†Ô∏è Skip Claude Code Review" >> $GITHUB_STEP_SUMMARY
              echo "**Reason:** Non-critical validation issues should be addressed first" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          # Display error summary if there are errors
          if [ "${ERROR_COUNT}" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Validation Errors" >> $GITHUB_STEP_SUMMARY
            jq -r '.errors[] | "- \(.severity | ascii_upcase): \(.message)"' error-report.json >> $GITHUB_STEP_SUMMARY
          fi

  # Job 2: Run Claude Code Review (only when all validations pass)
  claude-review:
    name: Run Claude Code Review
    runs-on: ubuntu-latest
    needs: evaluate
    if: needs.evaluate.outputs.should_review == 'true'

    steps:
      - name: Set status to pending
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.workflow_run.head_sha }}',
              state: 'pending',
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              description: 'Claude Code review in progress...',
              context: 'Claude Code Review (Conditional)'
            });

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        run: |
          # Get list of changed files in the PR
          gh pr view ${{ needs.evaluate.outputs.pr_number }} \
            --json files \
            --jq '.files[].path' > changed-files.txt

          echo "Changed files:"
          cat changed-files.txt

          # Store as multiline output
          {
            echo 'files<<EOF'
            cat changed-files.txt
            echo EOF
          } >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ needs.evaluate.outputs.pr_number }}

            ‚úÖ **All validations have passed!** Frontend builds, backend tests, and security scans are all successful.

            Please perform a comprehensive code review focusing on:
            - Code quality and best practices
            - Potential bugs or edge cases
            - Performance considerations
            - Security concerns
            - Test coverage adequacy
            - Architecture and design patterns

            Changed files in this PR:
            ${{ steps.changed-files.outputs.files }}

            Use the repository's CLAUDE.md for guidance on style and conventions.
            Be constructive and thorough in your feedback.

            Use `gh pr comment` with your Bash tool to leave your review as a comment on the PR.
          claude_args: '--allowed-tools "Bash(gh issue view:*),Bash(gh search:*),Bash(gh issue list:*),Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*),Bash(gh pr list:*)"'

      - name: Set status to success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.workflow_run.head_sha }}',
              state: 'success',
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              description: 'Claude Code review completed',
              context: 'Claude Code Review (Conditional)'
            });

      - name: Set status to failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.workflow_run.head_sha }}',
              state: 'failure',
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              description: 'Claude Code review failed',
              context: 'Claude Code Review (Conditional)'
            });

  # Job 3: Post skip notification when validations fail
  skip-notification:
    name: Post Skip Notification
    runs-on: ubuntu-latest
    needs: evaluate
    if: needs.evaluate.outputs.should_review == 'false'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Post PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const { all_passed, has_critical_failures, validation_summary } = {
              all_passed: '${{ needs.evaluate.outputs.all_passed }}',
              has_critical_failures: '${{ needs.evaluate.outputs.has_critical_failures }}',
              validation_summary: '${{ needs.evaluate.outputs.validation_summary }}'
            };

            let commentBody = '## ü§ñ Claude Code Review Status\n\n';
            commentBody += `${validation_summary}\n\n`;

            if (has_critical_failures === 'true') {
              commentBody += '### ‚ùå Critical Validation Failures\n\n';
              commentBody += 'Claude Code review has been **skipped** because critical validation failures were detected. ';
              commentBody += 'Please fix the failing validations first:\n\n';
            } else if (all_passed === 'false') {
              commentBody += '### ‚ö†Ô∏è Non-Critical Validation Issues\n\n';
              commentBody += 'Claude Code review has been **skipped** because validation issues were detected. ';
              commentBody += 'Please address these issues first:\n\n';
            } else {
              commentBody += '### ‚ÑπÔ∏è Validation Status Unknown\n\n';
              commentBody += 'Claude Code review has been **skipped** because validation results could not be determined.\n\n';
            }

            commentBody += `**Validation Run:** [View Details](${context.payload.workflow_run.html_url})\n`;
            commentBody += `**Orchestrator Run:** ${{ github.event.workflow_run.id }}\n\n`;
            commentBody += '---\n';
            commentBody += '*Once all validations pass, Claude Code review will run automatically.*';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.evaluate.outputs.pr_number }},
              body: commentBody
            });

      - name: Set status to success (review skipped)
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.workflow_run.head_sha }}',
              state: 'success',
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              description: 'Skipped - fix validations first',
              context: 'Claude Code Review (Conditional)'
            });
