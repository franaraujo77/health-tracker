name: Backend CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

# Cancel in-progress runs for the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: backend

jobs:
  # Job 1: Build and test
  test:
    name: Build & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: healthtracker_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Verify Maven wrapper
        run: chmod +x mvnw

      - name: Run tests
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/healthtracker_test
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          JWT_SECRET: testSecretKeyForCITestingPurposesOnly1234567890ABCDEF
          JWT_AUDIENCE: health-tracker-app
          ENCRYPTION_SECRET: test-encryption-key-for-ci-testing-only
          ENCRYPTION_SALT: test-salt-for-ci-testing-only
          CORS_ALLOWED_ORIGINS: http://localhost:5173
        run: ./mvnw test -B

      - name: Build JAR package
        run: ./mvnw clean package -DskipTests -B

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar-${{ github.sha }}
          path: backend/target/*.jar
          retention-days: 7

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.sha }}
          path: backend/target/surefire-reports/
          retention-days: 7

      - name: Generate test summary
        if: always()
        run: |
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -d target/surefire-reports ]; then
            echo "Tests executed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "JAR size: $(du -h target/*.jar | cut -f1)" >> $GITHUB_STEP_SUMMARY
          else
            echo "No test reports found" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 2: Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: healthtracker_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run tests with coverage
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/healthtracker_test
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          JWT_SECRET: testSecretKeyForCITestingPurposesOnly1234567890ABCDEF
          JWT_AUDIENCE: health-tracker-app
          ENCRYPTION_SECRET: test-encryption-key-for-ci-testing-only
          ENCRYPTION_SALT: test-salt-for-ci-testing-only
          CORS_ALLOWED_ORIGINS: http://localhost:5173
        run: ./mvnw test jacoco:report -B

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          files: backend/target/site/jacoco/jacoco.xml
          flags: backend
          name: backend-coverage

      - name: Generate coverage report
        run: |
          echo "## Code Coverage Report" >> $GITHUB_STEP_SUMMARY
          if [ -f target/site/jacoco/index.html ]; then
            echo "Coverage report generated successfully!" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 3: Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=backend/pom.xml

      - name: Run OWASP Dependency Check
        run: ./mvnw dependency-check:check -B
        continue-on-error: true

      - name: Upload dependency check report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-report-${{ github.sha }}
          path: backend/target/dependency-check-report.html
          retention-days: 7

  # Job 4: Code quality
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          if [ -n "$SONAR_TOKEN" ]; then
            ./mvnw sonar:sonar \
              -Dsonar.projectKey=health-tracker-backend \
              -Dsonar.host.url=$SONAR_HOST_URL \
              -Dsonar.token=$SONAR_TOKEN \
              -B
          else
            echo "SonarQube token not configured, skipping analysis"
          fi
        continue-on-error: true

