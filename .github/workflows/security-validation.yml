name: Security Validation

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/security-validation.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/security-validation.yml'

  # Allow this workflow to be called by other workflows (e.g., validation-orchestrator)
  workflow_call:
    outputs:
      dependency-scan-status:
        description: 'Status of dependency vulnerability scanning'
        value: ${{ jobs.dependency-scan.outputs.scan-status }}
      sast-status:
        description: 'Status of static application security testing'
        value: ${{ jobs.sast.outputs.sast-status }}

# Cancel in-progress runs for the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Dependency scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    continue-on-error: false  # Job should fail if vulnerabilities found, not if Docker fails

    outputs:
      scan-status: ${{ steps.set-outputs.outputs.scan-status }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Set up Node.js for Snyk CLI
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Verify Maven wrapper
        working-directory: backend
        run: chmod +x mvnw

      - name: Run OWASP Dependency Check
        id: owasp-check
        working-directory: backend
        continue-on-error: true
        run: ./mvnw dependency-check:check -B

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        id: snyk-auth
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -n "$SNYK_TOKEN" ]; then
            snyk auth "$SNYK_TOKEN"
            echo "authenticated=true" >> $GITHUB_OUTPUT
          else
            echo "::warning::Snyk token not configured, skipping Snyk scan"
            echo "authenticated=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Snyk to check for vulnerabilities
        id: snyk-check
        if: steps.snyk-auth.outputs.authenticated == 'true'
        continue-on-error: true
        run: |
          cd backend
          snyk test --severity-threshold=high --file=pom.xml || echo "::warning::Snyk found vulnerabilities"

      - name: Upload dependency check report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-report-${{ github.sha }}
          path: backend/target/dependency-check-report.html
          retention-days: 7

      - name: Set scan output
        id: set-outputs
        if: always()
        run: |
          # Handle different outcome states (success, failure, skipped)
          OWASP_OUTCOME="${{ steps.owasp-check.outcome }}"

          echo "OWASP Dependency Check outcome: $OWASP_OUTCOME"

          # Dependency scan is successful if OWASP check passes or was skipped (when Docker unavailable)
          # Snyk failures are treated as warnings since they require a token
          if [ "$OWASP_OUTCOME" = "success" ]; then
            echo "scan-status=success" >> $GITHUB_OUTPUT
            echo "âœ… OWASP Dependency Check passed"
          elif [ "$OWASP_OUTCOME" = "skipped" ]; then
            echo "scan-status=warning" >> $GITHUB_OUTPUT
            echo "::warning::OWASP Dependency Check was skipped (possibly due to Docker service unavailability)"
          else
            echo "scan-status=failure" >> $GITHUB_OUTPUT
            echo "::error::OWASP Dependency Check found vulnerabilities"
            exit 1
          fi

          # Warning for Snyk failures (non-critical if token is missing)
          SNYK_OUTCOME="${{ steps.snyk-check.outcome }}"
          if [ "$SNYK_OUTCOME" != "success" ] && [ "$SNYK_OUTCOME" != "skipped" ]; then
            echo "::warning::Snyk vulnerability scan did not complete successfully"
          fi

  # Job 2: Static Application Security Testing (SAST)
  sast:
    name: Static Application Security Testing
    runs-on: ubuntu-latest

    outputs:
      sast-status: ${{ steps.set-outputs.outputs.sast-status }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Verify Maven wrapper
        working-directory: backend
        run: chmod +x mvnw

      - name: Run SonarQube analysis
        id: sonar-scan
        working-directory: backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          if [ -n "$SONAR_TOKEN" ]; then
            ./mvnw sonar:sonar \
              -Dsonar.projectKey=health-tracker-backend \
              -Dsonar.host.url=$SONAR_HOST_URL \
              -Dsonar.token=$SONAR_TOKEN \
              -B
          else
            echo "SonarQube token not configured, skipping analysis"
            exit 0
          fi
        continue-on-error: true

      - name: Set SAST output
        id: set-outputs
        if: always()
        run: |
          # SAST is treated as a warning if SonarQube is not configured
          # This allows the pipeline to continue even without SonarQube setup
          if [ "${{ steps.sonar-scan.outcome }}" = "success" ]; then
            echo "sast-status=success" >> $GITHUB_OUTPUT
          elif [ -z "${{ secrets.SONAR_TOKEN }}" ]; then
            echo "sast-status=success" >> $GITHUB_OUTPUT
            echo "::warning::SonarQube not configured, skipping SAST"
          else
            echo "sast-status=failure" >> $GITHUB_OUTPUT
            echo "::warning::SAST scan did not complete successfully"
          fi
