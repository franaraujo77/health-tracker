name: Frontend CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'

  # Allow this workflow to be called by other workflows (e.g., validation-orchestrator)
  workflow_call:
    outputs:
      lint-status:
        description: 'Status of linting checks'
        value: ${{ jobs.lint-and-test.outputs.lint-status }}
      type-status:
        description: 'Status of type checking'
        value: ${{ jobs.lint-and-test.outputs.type-status }}
      test-status:
        description: 'Status of tests'
        value: ${{ jobs.lint-and-test.outputs.test-status }}
      build-status:
        description: 'Status of build'
        value: ${{ jobs.lint-and-test.outputs.build-status }}

jobs:
  lint-and-test:
    name: Lint, Test & Build
    runs-on: ubuntu-latest
    # This workflow handles an npm workspaces monorepo:
    # - package-lock.json lives at repository root
    # - npm ci runs at root to install all workspace dependencies
    # - npm scripts run from ./frontend directory (where frontend/package.json is)

    outputs:
      lint-status: ${{ steps.set-outputs.outputs.lint-status }}
      type-status: ${{ steps.set-outputs.outputs.type-status }}
      test-status: ${{ steps.set-outputs.outputs.test-status }}
      build-status: ${{ steps.set-outputs.outputs.build-status }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json  # Lock file at repository root

      - name: Install dependencies
        run: npm ci
        working-directory: .  # Install all workspace dependencies from root

      - name: Validate Design Tokens
        run: npm run tokens:check
        working-directory: ./frontend

      - name: Lint TypeScript
        id: lint-ts
        continue-on-error: true
        run: npm run lint
        working-directory: ./frontend

      - name: Lint CSS
        id: lint-css
        continue-on-error: true
        run: npm run lint:css
        working-directory: ./frontend

      - name: Type Check
        id: type-check
        continue-on-error: true
        run: npm run type-check
        working-directory: ./frontend

      - name: Run tests with coverage
        id: test
        continue-on-error: true
        run: npm run test:coverage
        working-directory: ./frontend

      - name: Upload coverage reports
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: frontend/coverage/
          retention-days: 7

      - name: Build
        id: build
        continue-on-error: true
        run: npm run build
        working-directory: ./frontend

      - name: Check bundle size
        run: npm run check:bundle-size
        working-directory: ./frontend

      - name: Run size-limit
        run: npm run size
        working-directory: ./frontend

      - name: Upload bundle stats
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: bundle-stats
          path: frontend/dist/stats.html
          retention-days: 30

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

      - name: Set validation outputs
        id: set-outputs
        if: always()
        run: |
          # Determine lint status (both TS and CSS must pass)
          if [ "${{ steps.lint-ts.outcome }}" = "success" ] && [ "${{ steps.lint-css.outcome }}" = "success" ]; then
            echo "lint-status=success" >> $GITHUB_OUTPUT
          else
            echo "lint-status=failure" >> $GITHUB_OUTPUT
          fi

          # Type check status
          if [ "${{ steps.type-check.outcome }}" = "success" ]; then
            echo "type-status=success" >> $GITHUB_OUTPUT
          else
            echo "type-status=failure" >> $GITHUB_OUTPUT
          fi

          # Test status
          if [ "${{ steps.test.outcome }}" = "success" ]; then
            echo "test-status=success" >> $GITHUB_OUTPUT
          else
            echo "test-status=failure" >> $GITHUB_OUTPUT
          fi

          # Build status
          if [ "${{ steps.build.outcome }}" = "success" ]; then
            echo "build-status=success" >> $GITHUB_OUTPUT
          else
            echo "build-status=failure" >> $GITHUB_OUTPUT
          fi

          # Fail the job if any critical checks failed
          if [ "${{ steps.type-check.outcome }}" != "success" ] || \
             [ "${{ steps.test.outcome }}" != "success" ] || \
             [ "${{ steps.build.outcome }}" != "success" ]; then
            echo "::error::One or more critical frontend validations failed"
            exit 1
          fi

          # Warning for lint failures (non-critical)
          if [ "${{ steps.lint-ts.outcome }}" != "success" ] || \
             [ "${{ steps.lint-css.outcome }}" != "success" ]; then
            echo "::warning::Linting checks failed but continuing"
          fi
