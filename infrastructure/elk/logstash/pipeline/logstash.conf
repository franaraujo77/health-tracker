# Logstash Pipeline Configuration for Health Tracker
# Processes logs from Spring Boot application and masks PHI data

input {
  # Receive logs from Spring Boot via TCP
  tcp {
    port => 5000
    codec => json_lines
    tags => ["spring-boot"]
  }

  # Receive logs from Filebeat (optional)
  beats {
    port => 5044
    tags => ["filebeat"]
  }
}

filter {
  # Parse JSON logs
  if [type] == "json" or "spring-boot" in [tags] {
    json {
      source => "message"
      skip_on_invalid_json => true
    }
  }

  # Add timestamp
  date {
    match => [ "@timestamp", "ISO8601" ]
    target => "@timestamp"
  }

  # Mask PHI data (Protected Health Information)
  # Email addresses
  mutate {
    gsub => [
      "message", "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b", "***EMAIL***"
    ]
  }

  # SSN (Social Security Number)
  mutate {
    gsub => [
      "message", "\b\d{3}-\d{2}-\d{4}\b", "***SSN***"
    ]
  }

  # Phone numbers (various formats)
  mutate {
    gsub => [
      "message", "\b\d{3}[-.]?\d{3}[-.]?\d{4}\b", "***PHONE***",
      "message", "\(\d{3}\)\s?\d{3}[-.]?\d{4}", "***PHONE***"
    ]
  }

  # Credit card numbers
  mutate {
    gsub => [
      "message", "\b\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4}\b", "***CARD***"
    ]
  }

  # Date of birth patterns
  mutate {
    gsub => [
      "message", "\b(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01])/\d{4}\b", "***DOB***",
      "message", "\b\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b", "***DOB***"
    ]
  }

  # Medical record numbers (MRN) - assuming format MRN-XXXXXXX
  mutate {
    gsub => [
      "message", "\bMRN-?\d{7,10}\b", "***MRN***"
    ]
  }

  # IP addresses (optional, for privacy)
  mutate {
    gsub => [
      "message", "\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b", "***IP***"
    ]
  }

  # Add geoip data if client IP is present
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }

  # Parse log level
  if [level] {
    mutate {
      uppercase => [ "level" ]
    }
  }

  # Add environment tags
  if [environment] {
    mutate {
      add_tag => [ "%{environment}" ]
    }
  }

  # Classify log type
  if [logger_name] =~ /^AUDIT/ {
    mutate {
      add_field => { "log_type" => "audit" }
      add_tag => [ "audit" ]
    }
  } else if [logger_name] =~ /security|auth|login/ {
    mutate {
      add_field => { "log_type" => "security" }
      add_tag => [ "security" ]
    }
  } else if [level] == "ERROR" or [level] == "FATAL" {
    mutate {
      add_field => { "log_type" => "error" }
      add_tag => [ "error" ]
    }
  } else {
    mutate {
      add_field => { "log_type" => "application" }
    }
  }

  # Remove sensitive fields
  mutate {
    remove_field => [ "password", "token", "secret", "api_key" ]
  }
}

output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]

    # Index naming strategy
    index => "healthtracker-%{log_type}-%{+YYYY.MM.dd}"

    # ILM policy for index lifecycle management
    ilm_enabled => true
    ilm_rollover_alias => "healthtracker"
    ilm_pattern => "{now/d}-000001"
    ilm_policy => "healthtracker-policy"
  }

  # Debug output (comment out in production)
  # stdout {
  #   codec => rubydebug
  # }
}
