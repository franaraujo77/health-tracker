# Alertmanager Configuration Secret
# Contains routing rules, receivers, and inhibition rules
#
# IMPORTANT: Update notification receivers with actual endpoints before deploying
---
apiVersion: v1
kind: Secret
metadata:
  name: alertmanager-config
  namespace: observability
  labels:
    app: alertmanager
    component: alerting
type: Opaque
stringData:
  alertmanager.yml: |
    # Global configuration
    global:
      resolve_timeout: 5m
      # SMTP configuration (update with actual values)
      smtp_from: 'alertmanager@health-tracker.example.com'
      smtp_smarthost: 'smtp.example.com:587'
      smtp_auth_username: 'REPLACE_WITH_SMTP_USER'
      smtp_auth_password: 'REPLACE_WITH_SMTP_PASSWORD'
      smtp_require_tls: true

    # Template files for custom notification formats
    templates:
      - '/etc/alertmanager/templates/*.tmpl'

    # Routing tree - routes alerts to appropriate receivers
    route:
      # Default receiver for unmatched alerts
      receiver: 'default-notifications'
      # Group alerts by these labels
      group_by: ['alertname', 'cluster', 'service']
      # Wait time before sending first notification
      group_wait: 30s
      # Wait time before sending updated notification for a group
      group_interval: 5m
      # Wait time before re-sending notification if no updates
      repeat_interval: 4h

      # Child routes with specific matchers
      routes:
        # Critical SLO violations - immediate page
        - match:
            severity: critical
          receiver: 'pagerduty-critical'
          group_wait: 10s
          group_interval: 5m
          repeat_interval: 30m
          continue: true  # Also send to other receivers

        - match:
            severity: critical
          receiver: 'slack-critical'
          group_wait: 10s

        # Warning alerts - Slack only
        - match:
            severity: warning
          receiver: 'slack-warnings'
          group_wait: 2m
          group_interval: 10m
          repeat_interval: 12h

        # Info alerts - email only, less urgency
        - match:
            severity: info
          receiver: 'email-info'
          group_wait: 5m
          group_interval: 30m
          repeat_interval: 24h

        # Team-specific routing
        - match:
            team: platform
          receiver: 'slack-platform-team'

        - match:
            team: sre
          receiver: 'slack-sre-team'

        # Database alerts - DBA team
        - match_re:
            service: '(postgres|mysql|redis|mongodb)'
          receiver: 'slack-dba-team'
          group_by: ['alertname', 'cluster', 'database']

        # Security alerts - security team
        - match:
            category: security
          receiver: 'slack-security-team'
          group_wait: 30s
          repeat_interval: 1h

    # Inhibition rules - suppress alerts based on other alerts
    inhibit_rules:
      # Inhibit warning if critical is firing for same alert
      - source_match:
          severity: critical
        target_match:
          severity: warning
        equal: ['alertname', 'cluster', 'service']

      # Inhibit instance-level alerts if cluster-level alert is firing
      - source_match:
          scope: cluster
        target_match:
          scope: instance
        equal: ['cluster', 'service']

      # Inhibit pod alerts if node is down
      - source_match:
          alertname: NodeDown
        target_match_re:
          alertname: 'Pod.*'
        equal: ['node']

    # Notification receivers
    receivers:
      # Default receiver
      - name: 'default-notifications'
        email_configs:
          - to: 'alerts@health-tracker.example.com'
            headers:
              Subject: '{{ .GroupLabels.alertname }}: {{ .CommonAnnotations.summary }}'

      # Critical alerts - PagerDuty
      - name: 'pagerduty-critical'
        pagerduty_configs:
          - service_key: 'REPLACE_WITH_PAGERDUTY_KEY'
            description: '{{ .GroupLabels.alertname }}: {{ .CommonAnnotations.summary }}'
            details:
              firing: '{{ .Alerts.Firing | len }}'
              resolved: '{{ .Alerts.Resolved | len }}'
              cluster: '{{ .GroupLabels.cluster }}'
              service: '{{ .GroupLabels.service }}'

      # Critical alerts - Slack
      - name: 'slack-critical'
        slack_configs:
          - api_url: 'REPLACE_WITH_SLACK_WEBHOOK_URL'
            channel: '#alerts-critical'
            title: ':fire: {{ .GroupLabels.alertname }}'
            text: |
              *Summary:* {{ .CommonAnnotations.summary }}
              *Description:* {{ .CommonAnnotations.description }}
              *Severity:* {{ .CommonLabels.severity }}
              *Service:* {{ .GroupLabels.service }}
              *Cluster:* {{ .GroupLabels.cluster }}
            color: 'danger'
            send_resolved: true

      # Warning alerts - Slack
      - name: 'slack-warnings'
        slack_configs:
          - api_url: 'REPLACE_WITH_SLACK_WEBHOOK_URL'
            channel: '#alerts-warnings'
            title: ':warning: {{ .GroupLabels.alertname }}'
            text: '{{ .CommonAnnotations.summary }}'
            color: 'warning'
            send_resolved: true

      # Info alerts - Email
      - name: 'email-info'
        email_configs:
          - to: 'monitoring@health-tracker.example.com'
            headers:
              Subject: '[INFO] {{ .GroupLabels.alertname }}'

      # Team-specific receivers
      - name: 'slack-platform-team'
        slack_configs:
          - api_url: 'REPLACE_WITH_SLACK_WEBHOOK_URL'
            channel: '#team-platform-alerts'

      - name: 'slack-sre-team'
        slack_configs:
          - api_url: 'REPLACE_WITH_SLACK_WEBHOOK_URL'
            channel: '#team-sre-alerts'

      - name: 'slack-dba-team'
        slack_configs:
          - api_url: 'REPLACE_WITH_SLACK_WEBHOOK_URL'
            channel: '#team-dba-alerts'

      - name: 'slack-security-team'
        slack_configs:
          - api_url: 'REPLACE_WITH_SLACK_WEBHOOK_URL'
            channel: '#security-alerts'
            color: 'danger'
