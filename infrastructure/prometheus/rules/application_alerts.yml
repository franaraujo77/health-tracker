# Prometheus Alert Rules for Health Tracker Application
# These rules trigger alerts based on metrics thresholds

groups:
  - name: application_alerts
    interval: 30s
    rules:
      # Alert when error rate is high (>5% of requests return 5xx)
      - alert: HighErrorRate
        expr: rate(http_server_requests_seconds_count{status=~"5.."}[5m]) / rate(http_server_requests_seconds_count[5m]) > 0.05
        for: 5m
        labels:
          severity: critical
          service: backend
        annotations:
          summary: "High error rate detected in {{ $labels.service }}"
          description: "Error rate is {{ $value | humanizePercentage }} (threshold: 5%)"

      # Alert when CPU usage is consistently high
      - alert: HighCPUUsage
        expr: system_cpu_usage > 0.8
        for: 10m
        labels:
          severity: warning
          service: backend
        annotations:
          summary: "High CPU usage on {{ $labels.service }}"
          description: "CPU usage is {{ $value | humanizePercentage }} (threshold: 80%)"

      # Alert when memory usage is high
      - alert: HighMemoryUsage
        expr: jvm_memory_used_bytes{area="heap"} / jvm_memory_max_bytes{area="heap"} > 0.85
        for: 5m
        labels:
          severity: warning
          service: backend
        annotations:
          summary: "High JVM heap memory usage on {{ $labels.service }}"
          description: "Heap memory usage is {{ $value | humanizePercentage }} (threshold: 85%)"

      # Alert when database connection pool is nearly exhausted
      - alert: DatabaseConnectionPoolExhaustion
        expr: hikaricp_connections_active / hikaricp_connections_max > 0.9
        for: 5m
        labels:
          severity: critical
          service: backend
        annotations:
          summary: "Database connection pool nearly exhausted"
          description: "{{ $value | humanizePercentage }} of database connections are in use (threshold: 90%)"

      # Alert when application is down (no metrics received)
      - alert: ApplicationDown
        expr: up{job="backend"} == 0
        for: 2m
        labels:
          severity: critical
          service: backend
        annotations:
          summary: "Backend application is down"
          description: "Prometheus cannot scrape metrics from backend service"

      # Alert when API response time is slow (p95 > 2 seconds)
      - alert: SlowAPIResponse
        expr: histogram_quantile(0.95, rate(http_server_requests_seconds_bucket[5m])) > 2
        for: 5m
        labels:
          severity: warning
          service: backend
        annotations:
          summary: "API response time is slow"
          description: "95th percentile response time is {{ $value }}s (threshold: 2s)"

      # Alert when too many failed login attempts (potential brute force)
      - alert: HighFailedLoginRate
        expr: rate(http_server_requests_seconds_count{uri="/api/v1/auth/login",status="401"}[5m]) > 5
        for: 5m
        labels:
          severity: warning
          service: backend
          security: true
        annotations:
          summary: "High rate of failed login attempts"
          description: "{{ $value }} failed login attempts per second (threshold: 5/s)"

      # Alert when garbage collection is taking too long
      - alert: HighGCTime
        expr: rate(jvm_gc_pause_seconds_sum[5m]) / rate(jvm_gc_pause_seconds_count[5m]) > 0.5
        for: 5m
        labels:
          severity: warning
          service: backend
        annotations:
          summary: "High garbage collection time"
          description: "Average GC pause time is {{ $value }}s (threshold: 0.5s)"

  - name: database_alerts
    interval: 30s
    rules:
      # Alert when database health check fails
      - alert: DatabaseHealthCheckFailed
        expr: health_status{component="db"} == 0
        for: 2m
        labels:
          severity: critical
          service: database
        annotations:
          summary: "Database health check is failing"
          description: "PostgreSQL database is not responding to health checks"

      # Alert when database query time is slow
      - alert: SlowDatabaseQueries
        expr: rate(hikaricp_connections_usage_seconds_sum[5m]) / rate(hikaricp_connections_usage_seconds_count[5m]) > 1
        for: 5m
        labels:
          severity: warning
          service: database
        annotations:
          summary: "Database queries are slow"
          description: "Average query execution time is {{ $value }}s (threshold: 1s)"
