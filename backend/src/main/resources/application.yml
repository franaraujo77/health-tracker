spring:
  application:
    name: health-tracker-backend

  datasource:
    url: jdbc:postgresql://localhost:5433/healthtracker
    username: admin
    password: ${DB_PASSWORD:secret}
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true

  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration

# JWT Configuration
jwt:
  secret: ${JWT_SECRET}  # REQUIRED: No default - set via environment variable
  access-token-expiration: ${JWT_ACCESS_EXPIRATION:1800000}  # 30 minutes (30 * 60 * 1000)
  refresh-token-expiration: ${JWT_REFRESH_EXPIRATION:2592000000}  # 30 days
  issuer: ${JWT_ISSUER:health-tracker-api}
  audience: ${JWT_AUDIENCE:health-tracker-app}

# Encryption Configuration (for PHI data - HIPAA compliant)
encryption:
  secret: ${ENCRYPTION_SECRET}  # REQUIRED: Must be different from JWT secret
  salt: ${ENCRYPTION_SALT}  # REQUIRED: Unique salt for key derivation
  algorithm: ${ENCRYPTION_ALGORITHM:AES/GCM/NoPadding}

# Security Validator Configuration
security:
  validator:
    # Minimum length for JWT and encryption secrets (in characters)
    # Default: 32 characters = 256 bits (HS256 requirement)
    # For quantum-resistant security, consider 64+ characters
    min-secret-length: ${SECURITY_MIN_SECRET_LENGTH:32}

    # Pattern to detect development secrets (e.g., "dev-secret-key")
    # Production validator rejects secrets containing this pattern
    # Default: "dev-"
    dev-secret-pattern: ${SECURITY_DEV_PATTERN:dev-}

    # Pattern to detect placeholder secrets (e.g., "change-me-in-production")
    # Production validator rejects secrets containing this pattern
    # Default: "change-me"
    change-me-pattern: ${SECURITY_CHANGE_ME_PATTERN:change-me}

# Rate Limiting Configuration
rate-limit:
  auth:
    # Number of requests allowed per IP address per time window
    capacity: ${RATE_LIMIT_CAPACITY:5}
    # Time window in seconds for rate limiting
    refill-period-seconds: ${RATE_LIMIT_PERIOD:60}
    # Number of tokens to refill per period
    refill-tokens: ${RATE_LIMIT_REFILL:5}
  cache:
    # Maximum number of IP addresses to track in cache
    maximum-size: ${RATE_LIMIT_CACHE_SIZE:100000}
    # Time after last access when cache entries expire (in seconds)
    expire-after-access-seconds: ${RATE_LIMIT_CACHE_EXPIRE:3600}

server:
  port: 8080
  error:
    include-message: always
    include-binding-errors: always
  cookie:
    secure: ${COOKIE_SECURE:false}  # Set to true in production with HTTPS

management:
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus,info
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true

  health:
    db:
      enabled: true

  # Distributed Tracing Configuration
  tracing:
    sampling:
      probability: ${TRACING_SAMPLE_RATE:0.1}  # 10% sampling rate (use 1.0 for dev)

  otlp:
    tracing:
      endpoint: ${JAEGER_ENDPOINT:http://jaeger:4318/v1/traces}

logging:
  level:
    root: INFO
    com.healthtracker.backend: DEBUG
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

# SpringDoc OpenAPI Configuration
springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    tags-sorter: alpha
    operations-sorter: alpha
  show-actuator: false
